// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

// Importing necessary OpenZeppelin contracts and libraries
import "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol";
import "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol";
import "@openzeppelin/contracts/access/AccessControl.sol";
import "@openzeppelin/contracts/security/Pausable.sol";
import "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol";
import "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol";

/// @custom:security-contact tg: @N1KURA
contract RedForest is ERC20, ERC20Burnable, ERC20Snapshot, AccessControl, Pausable, ERC20Permit, ERC20Votes {
    bytes32 public constant SNAPSHOT_ROLE = keccak256("SNAPSHOT_ROLE");
    bytes32 public constant PAUSER_ROLE = keccak256("PAUSER_ROLE");

    // The constructor sets up initial values for the contract
    constructor() ERC20("Red Forest", "xREST") ERC20Permit("Red Forest") {
        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender); // Giving the DEFAULT_ADMIN_ROLE to the contract deployer
        _grantRole(SNAPSHOT_ROLE, msg.sender); // Giving the SNAPSHOT_ROLE to the contract deployer
        _grantRole(PAUSER_ROLE, msg.sender); // Giving the PAUSER_ROLE to the contract deployer
        _mint(msg.sender, 900000000 * 10 ** decimals()); // Minting 900,000,000 tokens and sending them to the contract deployer
    }

    // Allows users with the SNAPSHOT_ROLE to take a snapshot of the token balances and total supply
    function snapshot() public onlyRole(SNAPSHOT_ROLE) {
        _snapshot();
    }

    // Allows users with the PAUSER_ROLE to pause the contract, preventing transfers and approvals
    function pause() public onlyRole(PAUSER_ROLE) {
        _pause();
    }

    // Allows users with the PAUSER_ROLE to unpause the contract
    function unpause() public onlyRole(PAUSER_ROLE) {
        _unpause();
    }

    // Runs before each token transfer to ensure the contract is not paused
    function _beforeTokenTransfer(address from, address to, uint256 amount)
        internal
        whenNotPaused
        override(ERC20, ERC20Snapshot)
    {
        super._beforeTokenTransfer(from, to, amount);
    }

    // The following functions are overrides required by Solidity.

    // Runs after each token transfer to update the vote count
    function _afterTokenTransfer(address from, address to, uint256 amount)
        internal
        override(ERC20, ERC20Votes)
    {
        super._afterTokenTransfer(from, to, amount);
    }

    // Overrides the _mint function to update the vote count
    function _mint(address to, uint256 amount)
        internal
        override(ERC20, ERC20Votes)
    {
        super._mint(to, amount);
    }

    // Overrides the _burn function to update the vote count
    function _burn(address account, uint256 amount)
        internal
        override(ERC20, ERC20Votes)
    {
        super._burn(account, amount);
    }

    // Allows the DEFAULT_ADMIN_ROLE to update the contract address to a new contract
    function updateContract(address newContract) public onlyRole(DEFAULT_ADMIN_ROLE) {
        address payable receiver = payable(newContract);
        (bool success, ) = receiver.call{value: address(this).balance}("");
        require(success, "Transfer failed."); // Reverts the transaction if the transfer fails
    }

}
